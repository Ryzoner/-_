@page "/MeasuresAdd"
@using SKIV.Components.Models
@using SKIV.Components.Service
@using SKIV.Components.DataBase
@inject MeasureService MeasureService;
@inject VolunteerService VolunteerService;
@inject ParticipationService ParticipationService;
@inject ApplicationContext dbContext;
@rendermode InteractiveServer

<style>
    /* Общие стили */
    .container {
        display: flex;
        align-items: flex-start;
    }
    
    .form-container {
        width: 50%;
        margin-right: 20px;
    }
    
    .volunteers-container {
        width: 50%;
        padding: 20px;
        background-color: #f7f7f7;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    
    .navigation-button-container {
        margin-top: 20px;
    }
    
    .btn-page {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        background-color: #007bff;
        color: #fff;
        cursor: pointer;
    }
    
    .btn-page:disabled {
        background-color: #ccc;
        cursor: not-allowed;
    }
    
    /* Стили для форм ввода */
    .form-group {
        margin-bottom: 20px;
    }
    
    .form-control {
        width: calc(100% - 10px);
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        transition: border-color 0.3s;
    }
    
    .form-control:focus {
        border-color: #007bff;
        outline: none;
    }
    
    /* Стили для чекбоксов и меток */
    .checkbox-container {
        display: flex;
        align-items: center;
    }
    
    .checkbox-label {
        margin-left: 10px;
    }
    
    /* Стили для поля ввода оценки */
    .rating-input {
        width: 80px;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        transition: border-color 0.3s;
    }
    
    .rating-input:focus {
        border-color: #007bff;
        outline: none;
    }

</style>

<h3>Добавление мероприятия</h3>
<div class="container">
    <form class="form-container">
        <div class="form-group">
            <label for="measureName">Название события:</label>
            <input type="text" id="measureName" class="form-control" @bind="_measureName"/>
        </div>
        <div class="form-group">
            <label for="organizer">Организатор:</label>
            <input type="text" id="organizer" class="form-control" @bind="_organizer"/>
        </div>
        <div class="form-group">
            <label>Дата начала:</label>
            <input type="date" class="form-control" @bind="_startDate"/>
        </div>
        <div class="form-group">
            <label>Дата окончания:</label>
            <input type="date" class="form-control" @bind="_endDate"/>
        </div>
        <div class="form-group">
            <label>Время начала:</label>
            <input type="time" class="form-control" @bind="_startTime"/>
        </div>
        <div class="form-group">
            <label>Время конца:</label>
            <input type="time" class="form-control" @bind="_endTime"/>
        </div>
        <div class="form-group">
            <label>Место:</label>
            <input type="text" class="form-control" @bind="_place"/>
        </div>
        <div class="form-group">
            <label>Адрес:</label>
            <input type="text" class="form-control" @bind="_address"/>
        </div>
        <div class="form-group">
            <label>Всего участников:</label>
            <input type="number" class="form-control" @bind="_totalParticipants"/>
        </div>
        <div class="form-group">
            <label>Участников с ограничениями:</label>
            <input type="number" class="form-control" @bind="_participantsWithDisabilities"/>
        </div>
        <div class="form-group">
            <label>Имя контактного лица:</label>
            <input type="text" class="form-control" @bind="_contactFullName"/>
        </div>
        <div class="form-group">
            <label>Телефон контактного лица:</label>
            <input type="tel" class="form-control" @bind="_contactPhoneNumber"/>
        </div>
        <div class="form-group">
            <label>Email контактного лица:</label>
            <input type="email" class="form-control" @bind="_contactEmail"/>
        </div>
        <div class="form-group">
            <label>Всего волонтеров:</label>
            <input type="number" class="form-control" @bind="_totalVolunteers"/>
        </div>
        <div class="form-group">
            <label>Волонтеры с ограничениями:</label>
            <input type="number" class="form-control" @bind="_volunteersWithDisabilities"/>
        </div>
            <div class="form-group">
                <label>Медиа волонтеры:</label>
                <input type="number" class="form-control" @bind="_mediaVolunteers"/>
            </div>
        <div class="form-group">
            <label>Добро.ру (ссылка на сайт):</label>
            <input type="url" class="form-control" @bind="_dobroRu"/>
        </div>
        <div class="form-group">
            <label>Официальное письмо:</label>
            <input type="checkbox" class="form-check-input" @bind="_lp"/>
        </div>
        <div class="form-group">
            <label>Листы регистрации:</label>
            <input type="checkbox" class="form-check-input" @bind="_lr"/>
        </div>
        <div class="button-container">
             <button class="btn btn-primary" @onclick="AddMeasure">Добавить</button>
        </div>
    </form>

    <div class="volunteers-container">
        <form class="form-group">
            <label>Выбор волонтеров:</label>
            @foreach (var volunteerData in GetVolunteersOnCurrentPage())
            {
                <div class="checkbox-container">
                    <input type="checkbox" @bind="volunteerData.IsSelected" />
                    <label>@volunteerData.Volunteer.SurName @volunteerData.Volunteer.FirstName</label>
                    <input type="number" min="0" max="5" @bind="volunteerData.Rating" class="form-control rating-input" placeholder="Оценка" />
                </div>
            }
            <div class="navigation-button-container">
                <button class="btn-page" @onclick="(() => ChangePage(-1))" disabled="@IsFirstPage">Previous</button>
                <span>Page @currentPage</span>
                <button class="btn-page" @onclick="(() => ChangePage(1))" disabled="@IsLastPage">Next</button>
            </div>
        </form>
    </div>
</div>
@code {

    // Класс для представления волонтера с выбранным статусом и оценкой
    private class VolunteerData
    {
        public Volunteer Volunteer { get; set; }
        public bool IsSelected { get; set; }
        public int Rating { get; set; }
    }
    private string _searchQuery = "";
    private int _selectedRating = 1;
    private List<VolunteerData> _filteredVolunteers = new List<VolunteerData>();
    private List<VolunteerData> _volunteerData = new List<VolunteerData>();
    private List<VolunteerData> _selectedVolunteers = new List<VolunteerData>();
    private List<Volunteer>? _volunteers;
    private string? _measureName;
    private string? _organizer;
    private DateTime _startDate;
    private DateTime _endDate;
    private TimeOnly _startTime;
    private TimeOnly _endTime;
    private string? _place;
    private string? _address;
    private int _totalParticipants;
    private int _participantsWithDisabilities;
    private string? _contactFullName;
    private int? _contactPhoneNumber;
    private string? _contactEmail;
    private int _totalVolunteers;
    private int _volunteersWithDisabilities;
    private string? _dobroRu;
    private bool _lp;
    private bool _lr;
    private int _mediaVolunteers;
    private int pageSize = 10; // Количество элементов на странице
    private int currentPage = 1; // Текущая страница
    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage >= (_volunteerData.Count / pageSize) + 1;

    private void ChangePage(int increment)
    {
        currentPage += increment;
    }

    private List<VolunteerData> GetVolunteersOnCurrentPage()
    {
        return _volunteerData.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    protected override void OnInitialized()
    {
        _volunteers = VolunteerService.GetVolunteers();
        if (_volunteers == null) return;
        // Заполняем список объектов VolunteerData для каждого волонтера
        foreach (var volunteer in _volunteers)
        {
            _volunteerData.Add(new VolunteerData
            {
                Volunteer = volunteer,
                IsSelected = false,
                Rating = 0
            });
        }
    }

    private void AddMeasure()
    {
        var measure = new Measure()
        {
            MeasureName = _measureName,
            Organizer = _organizer,
            StartDate = _startDate,
            EndDate = _endDate.Date,
            StartTime = _startTime,
            EndTime = _endTime,
            Place = _place,
            Address = _address,
            TotalParticipants = _totalParticipants,
            ParticipantsWithDisabilities = _participantsWithDisabilities,
            ContactFullName = _contactFullName,
            ContactPhoneNumber = _contactPhoneNumber,
            ContactEmail = _contactEmail,
            TotalVolunteers = _totalVolunteers,
            VolunteersWithDisabilities = _volunteersWithDisabilities,
            MediaVolunteers = _mediaVolunteers,
            DobroRu = _dobroRu,
            LP = _lp,
            LR = _lr
        };
        // Добавление мероприятия
        MeasureService.AddMeasure(measure);

        // Добавление участников (волонтеров) и их оценок в базу данных
        foreach (var volunteerData in _selectedVolunteers)
        {
            var participation = new Participation
            {
                Measure = measure,
                Volunteer = volunteerData.Volunteer,
                Score = volunteerData.Rating
            };
            ParticipationService.AddParticipation(participation);
        }

        // Очищаем список выбранных волонтеров после добавления мероприятия
        _selectedVolunteers.Clear();

    }
}
